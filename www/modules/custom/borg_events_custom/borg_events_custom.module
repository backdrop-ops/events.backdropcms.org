<?php
/**
 * @file
 * ALterations for the events site.
 */

/**
 * Implements hook_menu().
 */
function borg_events_custom_menu() {
  // Make "Foo settings" appear on the admin Config page
  $items['admin/config/event'] = array(
    'title' => 'Backdrop Event settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('borg_events_custom_settings_form'),
    'access arguments' => array('administer_borg_events'),
    'file' => 'borg_events_custom.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function borg_events_custom_permission() {
  return array(
    'administer_borg_events' => array(
      'title' => t('Administer Borg events'),
      'description' => t('Set active event and registration open/closed status.'),
    ),
    /*
    'configure my module' => array(
      'title' => t('Configure my module'),
      'description' => t('Configure settings for my module.'),
    ),
    */
  );
}

/**
 * Implements hook_config_info().
 */
function borg_events_custom_config_info() {
  // If this configuration file points to one particular file, a "name" key
  // will display that exact string for that file.
  $prefixes['borg_events_custom.settings'] = array(
    'label' => t('Borg Events Settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_block_info().
 */
function borg_events_custom_block_info() {
  $blocks['live'] = array(
    'info' => t('Backdrop Live Promo Block'),
    'description' => t('A block about Backdrop live, with registration link.'),
  );
  $blocks['steps'] = array(
    'info' => t('Backdrop Live Next Steps'),
    'description' => t('A block with actions for attendees.'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function borg_events_custom_block_configure($delta = '', $settings = array()) {
  $form = array();
  if ($delta == 'live') {
    $settings += array(
      'display_date' => 'July 9th & 10th 2021',
      'text' => 'An online global event for those who use Backdrop CMS, or want to learn more about it.',
      'event_open' => TRUE,
      'event_nid' => 35,
    );

    $form['display_date'] = array(
      '#type' => 'textfield',
      '#title' => t('Event date'),
      '#disabled' => TRUE,
    );
    $config = config('borg_events_custom.settings');
    $current_event = (int) $config->get('event_nid');
    $next_event_info = _borg_events_get_event_info($current_event);
    dpm($next_event_info);
    if ($next_event_info) {
      $form['display_date']['#default_value'] = $next_event_info['display_date'];
      _borg_events_add_event_source_description($form['display_date'], $next_event_info);
    }
    else {
      $form['display_date']['#description'] = t('No current event.');
    }

    $form['text'] = array(
      '#type' => 'textfield',
      '#title' => t('Event text'),
      '#default_value' => $settings['text'],
      '#size' => 120,
    );

    _borg_events_add_event_settings($form, TRUE);

  }
  return $form;
}

/**
 * Helper function: Load current event.
 */
function _borg_events_get_event_info($nid) {
  $event_node = node_load($nid);
  if ($event_node) {
    $event_title = check_plain($event_node->title);
    $start_date = $event_node->field_event_date[LANGUAGE_NONE][0]['value'];
    $start_date_ymd = str_replace(' 00:00:00', '', $start_date);
    $display_date = check_plain($event_node->field_display_date[LANGUAGE_NONE][0]['value']);

    return array(
      'nid' => $nid,
      'title' => $event_title,
      'start_date' => $start_date,
      'start_date_ymd' => $start_date_ymd,
      'display_date' => $display_date,
      'edit' => l(t('edit event'), 'node/' . $nid . '/edit'),
    );
  }
}

/**
 * Helper function: add description referencing source of data.
 *
 * @param array $element
 *   Form API element to add the description.
 *
 * @param array $next_event_info
 *   Array of information about the next event from _borg_events_get_event_info().
 */
function _borg_events_add_event_source_description(&$element, $next_event_info) {
  $element['#description'] = t('This date is pulled from the event: :title (!edit)', array(
    ':title' => $next_event_info['title'],
    '!edit' => $next_event_info['edit'],
  ));
}

/**
 * Helper function: add site-wide settings options for form.
 */
function _borg_events_add_event_settings(&$form, $warning = TRUE) {
  $config = config('borg_events_custom.settings');
  $defaults = $config->get();
  $defaults['event_nid'] = (int) $defaults['event_nid'];


  $warning_text = 'This setting will change the event status for all related blocks.';
  if ($warning) {
    $warning_text = str_replace('This', 'WARNING: this', $warning_text);
    $warning_text = str_replace('will change', 'will also change', $warning_text);
  }

  $form['event_nid'] = array(
    '#type' => 'number',
    '#title' => t('Event Node ID'),
    '#description' => t($warning_text),
    '#default_value' => $defaults['event_nid'],
  );
  $form['event_open'] = array(
    '#type' => 'radios',
    '#title' => t('Is Registration open?'),
    '#description' => t($warning_text),
    '#options' => array(
      '0' => t('No'), 
      '1' => t('Yes'),
    ),
    '#default_value' => $defaults['event_open'],
  );
}

/**
 * Implements hook_block_view().
 */
function borg_events_custom_block_view($delta = '', $settings = array(), $contexts = array()) {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'live':
      $title = t('Backdrop LIVE - :date', array(':date' => $settings['display_date']));

      $text = check_plain($settings['text']);
      $markup = '<p>' . $text . '</p>';

      // Only add a register now button when registration is open.
      if (isset($settings['open'])) {
        $button_text = t('Register Now');
        $registration_node = 'node/' . $settings['nid'];
        $options = array('attributes' => array('class' => array('button')));

        global $user;
        if (!$user->uid) {
          // Anonyous, link goes to account creation form with destination.
          $query = array('destination' => $registration_node);
          $options['query'] = $query;
          $button = l($button_text, 'user/register', $options);
        }
        else {
          // Get the event info.
          $event_nid = config_get('borg_events_custom.settings', 'event_nid');
          if (!_borg_events_user_is_registered($event_nid)) {
            $button = l($button_text, $registration_node, $options);
          }
        }

        if (isset($button)) {
          $markup .= '<p>' . $button . '</p>';
        }
      }

      $block['subject'] = $title;
      $block['content'] = array(
        '##type' => 'markup',
        '#markup' => $markup,
      );
      break;

    case 'steps':

      // Only show steps if registration is open.
      $open = config_get('borg_events_custom.settings', 'event_open');
      if ($open) {
        $steps = _borg_events_custom_block_get_steps();

        global $user;
        if (!$user->uid) {
          $steps[1]['rendered'] = l($steps[1]['text'], $steps[1]['href']);
          $steps[1]['rendered'] .= ' or ' . l(t('log in'), 'user/login');
        }
        else {
          // Add a checkmark to #1.
          $steps[1]['checked'] = TRUE;

          // Get the event info.
          $event_nid = config_get('borg_events_custom.settings', 'event_nid');
          if (_borg_events_user_is_registered($event_nid)) {
            // Add a checkmark to #2.
            $steps[2]['checked'] = TRUE;
          }
          else {
            $steps[2]['href'] = 'node/' . $event_nid;
          }

          // Add a checkmark to #5.
          if (_borg_events_has_subimtted($event_nid, 'session')) {
            $steps[5]['checked'] = TRUE;
          }

          // Add a checkmark to #6.
          if (_borg_events_has_subimtted($event_nid, 'presentation')) {
            $steps[6]['checked'] = TRUE;
          }
        }

        // Format each link nicely.
        $rendered_steps = array();
        foreach ($steps as $stepnum => $step) {

          // If the step has been pre-rendered, use that.
          if (!isset($step['rendered'])) {
            // Otherwise, render it now.

            // Check the access.
            if (isset($step['access']) && !user_access($step['access'])) {
              // If no access, use a different link.
              $step['text'] = $step['noaccess_text'];
              $step['href'] = $step['noaccess_href'];
            }

            // Remove the link when item is checked.
            if (isset($step['checked_unlinked']) && $step['checked_unlinked']) {
              if (isset($step['checked']) && $step['checked']) {
                unset($step['href']);
              }
            }

            // Check for href before creating link.
            if (isset($step['href'])) {
              $steps[$stepnum]['rendered'] = l($step['text'], $step['href']) . '.';
            }
            else {
              $steps[$stepnum]['rendered'] = $step['text'] . '.';
            }
          }

          // Add a check if the step has been completed.
          if (isset($step['checked']) && $step['checked']) {
            $steps[$stepnum]['rendered'] .= ' ' . '<i class="fa fa-check"></i>';
          }
        }

        $register_steps = array(
          1 => $steps[1],
          2 => $steps[2],
          3 => $steps[3],
        );
        $register_steps_rendered = array();
        foreach ($register_steps as $stepnum => $step) {
          // Add the step and number.
          $register_steps_rendered[$stepnum] = t('Step ') . $stepnum . ': ' . $step['rendered'];
        }

        $next_steps = array(
          4 => $steps[4],
          5 => $steps[5],
          6 => $steps[6],
        );
        $next_steps_rendered = array();
        foreach ($next_steps as $stepnum => $step) {
          $next_steps_rendered[$stepnum] = $step['rendered'];
        }

        $register = theme('item_list', array('items' => $register_steps_rendered));
        $next = theme('item_list', array('items' => $next_steps_rendered));

        $heading = '<h3>' . t('Next Steps') . '</h3>';

        $block['subject'] = t('Register now');
        $block['content'] = array(
          '##type' => 'markup',
          '#markup' => $register . $heading . $next,
        );
        break;
      }
  }

  return $block;
}

/**
 * Implements hook_block_save().
 */
function borg_events_custom_block_save($delta, &$edit = array()) {
  if ($delta == 'live') {
    // Save the old NID for the time slot update.
    _borg_events_save_old_event($edit['event_nid']);

    // Using this block to set global values used by related blocks.
    config_set('borg_events_custom.settings', 'event_nid', $edit['event_nid']);
    config_set('borg_events_custom.settings', 'event_open', $edit['event_open']);
    // Not removeing the values so they will also be saved by Layout module.
  }
}

/**
 * Helper fuction, saves the previous node event ID.
 * 
 * @param $new_nid
 *   Node ID of the new event being set.
 */
function _borg_events_save_old_event($new_nid) {
  $old_nid = config_get('borg_events_custom.settings', 'event_nid');
  if ($new_nid != $old_nid) {
    config_set('borg_events_custom.settings', 'event_old_nid', $old_nid);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function borg_events_custom_form_registration_form_alter(&$form, &$form_state) {
  $form['field_participation_learn']['und'][0]['value']['#states'] = array(
    'visible' => array(
      ':input[name="field_participation[und][learn]"]' => array('checked' => TRUE),
    ),
  );
  $form['field_participation_discuss']['und'][0]['value']['#states'] = array(
    'visible' => array(
      ':input[name="field_participation[und][discuss]"]' => array('checked' => TRUE),
    ),
  );
  $form['field_participation_present']['und'][0]['value']['#states'] = array(
    'visible' => array(
      ':input[name="field_participation[und][present]"]' => array('checked' => TRUE),
    ),
  );
}


/**
 * Helper function: determine if current user is registered.
 *
 * @param integer $event_nid
 *   Node ID for the current event.
 *
 * @return boolean
 *   TRUE if user is registered, FALSE if not.
 */
function _borg_events_user_is_registered($event_nid = NULL) {
  // Get the event info.
  if (is_numeric($event_nid)) {
    global $user;
    // SELECT registration_id FROM registration WHERE entity_id = 124 AND user_uid = 24
    $query = "SELECT registration_id FROM {registration} WHERE user_uid = :uid and entity_id = :nid";
    $substitutions = array(':uid' => $user->uid, ':nid' => $event_nid);
    $registration_id = db_query($query, $substitutions)->fetchField();
    if ($registration_id && is_numeric($registration_id)) {
      return TRUE;
    }
  }

  return FALSE;
}

function _borg_events_has_subimtted($event_nid, $type = 'session') {
  global $user;

  // SELECT nid FROM node n INNER JOIN field_data_field_event f on n.nid = f.entity_id WHERE f.field_event_target_id = 124 AND n.uid = 2 AND n.type = discussion LIMIT 1
  $query = "SELECT nid FROM {node} n
    INNER JOIN {field_data_field_event} f
      ON n.nid = f.entity_id
    WHERE f.field_event_target_id = :event
      AND n.uid = :uid
      AND n.type = :type
      AND n.status = 1
    LIMIT 1";
  $substitutions = array(
    ':event' => $event_nid,
    ':uid' => $user->uid,
    ':type' => $type,
  );
  $nid = db_query($query, $substitutions)->fetchField();
  if ($nid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Helper function, gets list of steps for the block.
 *
 * @return array
 *   Array of steps keyed by step number, with the following properties:
 *   - text: Text for the step (required).
 *   - href: Destination for the link.
 *   - access: Access callback to generate the link.
 *   - noaccess_text: Text to use if access is denied.
 *   - noaccess_href: Destination for link if access is denied.
 *   - rendered: The rendered output for the step.
 *   - checked: Whether the step gets a checkmark or not.
 *   - checked_unlinked: Whether the link should disappear with the checkmark.
 */
function _borg_events_custom_block_get_steps() {
  $steps = array();

  $steps[1] = array(
    'text' => t('Create an account'),
    'href' => 'user/register',
    'require_open' => FALSE,
    'checked_unlinked' => TRUE,
  );
  $steps[2] = array(
    'text' => t('Register for the event'),
    'href' => 'user/register',
    'require_open' => TRUE,
    'checked_unlinked' => TRUE,
  );
  $steps[3] = array(
    'text' => t('Make a donation'),
    'href' => 'donate',
    'require_open' => TRUE,
    'checked_unlinked' => TRUE, // @todo
  );
  $steps[4] = array(
    'text' => t('View the schedule'),
    'href' => 'schedule',
    'require_open' => TRUE,
    'checked_unlinked' => TRUE, // @todo
  );
  $steps[5] = array(
    'text' => t('Suggest discussion topics'),
    'href' => 'node/add/session',
    'access' => 'create session content',
    'noaccess_text' => t('Review past discussion topics'),
    'noaccess_href' => 'archive/discussions',
    'checked_unlinked' => FALSE,
  );
  $steps[6] = array(
    'text' => t('Post video presentations'),
    'href' => 'node/add/presentation',
    'access' => 'create presentation content',
    'noaccess_text' => t('Watch past video presentations'),
    'noaccess_href' => 'archive/presentations',
    'checked_unlinked' => FALSE,
  );

  return $steps;
}
