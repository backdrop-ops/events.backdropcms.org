<?php
/**
 * @file
 * ALterations for the events site.
 */

/**
 * Implements hook_block_info().
 */
function borg_events_custom_block_info() {
  $blocks['live'] = array(
    'info' => t('Backdrop Live Promo Block'),
    'description' => t('A block about Backdrop live, with registration link.'),
  );
  $blocks['steps'] = array(
    'info' => t('Backdrop Live Next Steps'),
    'description' => t('A block with actions for attendees.'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function borg_events_custom_block_configure($delta = '', $settings = array()) {
  $form = array();
  if ($delta == 'live') {
    $settings += array(
      'display_date' => 'July 9th & 10th 2021',
      'text' => 'An online global event for those who use Backdrop CMS, or want to learn more about it.',
      'open' => TRUE,
      'nid' => 35,
    );
    $form['display_date'] = array(
      '#type' => 'textfield',
      '#title' => t('The date as displayed in the block'),
      '#default_value' => $settings['display_date'],
    );
    $form['text'] = array(
      '#type' => 'textfield',
      '#title' => t('The date as displayed in the block'),
      '#default_value' => $settings['text'],
      '#size' => 120,
    );
    $form['open'] = array(
      '#type' => 'radios',
      '#title' => t('Is Registration open?'),
      '#default_value' => $settings['open'],
      '#options' => array(FALSE => t('No'), TRUE => t('Yes')),
      '#description' => t('WARNING: this setting will also change the event status for all related blocks.'),
    );
    $form['nid'] = array(
      '#type' => 'number',
      '#title' => t('Event Node ID'),
      '#default_value' => $settings['nid'],
      '#description' => t('WARNING: this setting will also change the event nid for all related blocks.'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_configure().
 */
function borg_events_custom_block_view($delta = '', $settings = array(), $contexts = array()) {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'live':
      $title = t('Backdrop LIVE - :date', array(':date' => $settings['display_date']));

      $text = check_plain($settings['text']);
      $markup = '<p>' . $text . '</p>';

      // Only add a register now button when registration is open.
      if ($settings['open']) {
        $button_text = t('Register Now');
        $registration_node = 'node/' . $settings['nid'];
        $options = array('attributes' => array('class' => array('button')));

        global $user;
        if (!$user->uid) {
          // Anonyous, link goes to account creation form with destination.
          $query = array('destination' => $registration_node);
          $options['query'] = $query;
          $button = l($button_text, 'user/register', $options);
        }
        else {
          $button = l($button_text, $registration_node, $options);
        }

        $markup .= '<p>' . $button . '</p>';
      }

      $block['subject'] = $title;
      $block['content'] = array(
        '##type' => 'markup',
        '#markup' => $markup,
      );
      break;

    case 'steps':

      $steps = array();
      $steps[1] = t('Create an account');
      $steps[2] = t('Register for the event');
      $steps[3] = l(t('Make a donation'), 'donate');
      $steps[4] = t('Suggest a discussion topic');
      $steps[5] = t('Post a video presentation now');

      $checks = array();

      global $user;

      if (!$user->uid) {
        $steps[1] = l($steps[1], 'user/register');
        $steps[1] .= ' or ' . l(t('log in'), 'user/login');
      }
      else {
        // Add a checkmark to #1.
        $checks[1] = TRUE;

        // Get the event info.
        $event_nid = config_get('borg_events_custom.settings', 'event_nid');
        if (is_numeric($event_nid)) {
          $event_node = node_load($event_nid);
          if (registration_register_page_access('node', $event_node)) {
            $query = "SELECT registration_id FROM {registration} WHERE user_uid = :uid and entity_id = :nid";
            $substitutions = array(':uid' => $user->uid, ':nid' => $event_nid);
            $registration_id = db_query($query, $substitutions)->fetchField();
            if ($registration_id) {
              // Add a checkmark to #2.
              $checks[2] = TRUE;
            }
            else {
              $steps[2] = l($steps[2], 'node/' . $event_nid);
            }
            //$registration = entity_load('registration', $registration_id);
            // This won't work as it exclides the registration we pass in.
            //$registered = registration_is_registered($registration, NULL, $user->uid);
          }
        }

        // If logged in, but not allowed to create content, remove the link.
        if (user_access('create session content')) {
          $steps[4] = l($steps[4], 'node/add/session');
        }
        else {
          unset($steps[4]);
        }

        // If logged in, but not allowed to create content, remove the link.
        if (user_access('create presentation content')) {
          $steps[5] = l($steps[5], 'node/add/presentation');
        }
        else {
          unset($steps[5]);
        }
      }

      $open = config_get('borg_events_custom.settings', 'event_open');
      if (!$open) {
        $steps[2] = '<strike>' . $steps[2] . '.</strike> ' . t('Registration is now closed');
      }

      // Format each link nicely.
      foreach ($steps as $stepnum => $step) {
        $steps[$stepnum] = t('Step ') . $stepnum . ': ' . $step . '.';
        if (isset($checks[$stepnum])) {
          $steps[$stepnum] .= ' ' . '<i class="fa fa-check"></i>';
        }
      }

      $markup = theme('item_list', array('items' => $steps));

      $block['subject'] = t('Next Steps');
      $block['content'] = array(
        '##type' => 'markup',
        '#markup' => $markup,
      );
      break;
  }

  return $block;
}

/**
 * Implements hook_block_save().
 */
function borg_events_custom_block_save($delta, &$edit = array()) {
  if ($delta == 'live') {
    // Using this block to set global values used by related blocks.
    config_set('borg_events_custom.settings', 'event_nid', $edit['nid']);
    config_set('borg_events_custom.settings', 'event_open', $edit['open']);
    // Not removeing the values so they will also be saved by Layout module.
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function borg_events_custom_form_registration_form_alter(&$form, &$form_state) {
  $form['field_participation_learn']['und'][0]['value']['#states'] = array(
    'visible' => array(
      ':input[name="field_participation[und][learn]"]' => array('checked' => TRUE),
    ),
  );
  $form['field_participation_discuss']['und'][0]['value']['#states'] = array(
    'visible' => array(
      ':input[name="field_participation[und][discuss]"]' => array('checked' => TRUE),
    ),
  );
  $form['field_participation_present']['und'][0]['value']['#states'] = array(
    'visible' => array(
      ':input[name="field_participation[und][present]"]' => array('checked' => TRUE),
    ),
  );
}
